<?php/** * Resolve functions and definitions * * @link https://developer.wordpress.org/themes/basics/theme-functions/ * * @package Resolve */add_filter('show_admin_bar', '__return_false');if ( ! function_exists( 'resolve_setup' ) ) :	/**	 * Sets up theme defaults and registers support for various WordPress features.	 *	 * Note that this function is hooked into the after_setup_theme hook, which	 * runs before the init hook. The init hook is too late for some features, such	 * as indicating support for post thumbnails.	 */	function resolve_setup() {		/*		 * Make theme available for translation.		 * Translations can be filed in the /languages/ directory.		 * If you're building a theme based on Resolve, use a find and replace		 * to change 'resolve' to the name of your theme in all the template files.		 */		load_theme_textdomain( 'resolve', get_template_directory() . '/languages' );		// Add default posts and comments RSS feed links to head.		add_theme_support( 'automatic-feed-links' );		/*		 * Let WordPress manage the document title.		 * By adding theme support, we declare that this theme does not use a		 * hard-coded <title> tag in the document head, and expect WordPress to		 * provide it for us.		 */		add_theme_support( 'title-tag' );		/*		 * Enable support for Post Thumbnails on posts and pages.		 *		 * @link https://developer.wordpress.org/themes/functionality/featured-images-post-thumbnails/		 */		add_theme_support( 'post-thumbnails' );		// This theme uses wp_nav_menu() in one location.		register_nav_menus( array(			'menu-1' => esc_html__( 'Primary', 'resolve' ),			'menu-2' => esc_html__( 'Footer', 'resolve' ),		) );		/*		 * Switch default core markup for search form, comment form, and comments		 * to output valid HTML5.		 */		add_theme_support( 'html5', array(			'search-form',			'comment-form',			'comment-list',			'gallery',			'caption',		) );		// Set up the WordPress core custom background feature.		add_theme_support( 'custom-background', apply_filters( 'resolve_custom_background_args', array(			'default-color' => 'ffffff',			'default-image' => '',		) ) );		// Add theme support for selective refresh for widgets.		add_theme_support( 'customize-selective-refresh-widgets' );		/**		 * Add support for core custom logo.		 *		 * @link https://codex.wordpress.org/Theme_Logo		 */		add_theme_support( 'custom-logo', array(			'height'      => 250,			'width'       => 250,			'flex-width'  => true,			'flex-height' => true,		) );	}endif;add_action( 'after_setup_theme', 'resolve_setup' );/** * Set the content width in pixels, based on the theme's design and stylesheet. * * Priority 0 to make it available to lower priority callbacks. * * @global int $content_width */function resolve_content_width() {	// This variable is intended to be overruled from themes.	// Open WPCS issue: {@link https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1043}.	// phpcs:ignore WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedVariableFound	$GLOBALS['content_width'] = apply_filters( 'resolve_content_width', 640 );}add_action( 'after_setup_theme', 'resolve_content_width', 0 );/** * Register widget area. * * @link https://developer.wordpress.org/themes/functionality/sidebars/#registering-a-sidebar */function resolve_widgets_init() {	register_sidebar( array(		'name'          => esc_html__( 'Sidebar', 'resolve' ),		'id'            => 'sidebar-1',		'description'   => esc_html__( 'Add widgets here.', 'resolve' ),		'before_widget' => '<section id="%1$s" class="widget %2$s">',		'after_widget'  => '</section>',		'before_title'  => '<h2 class="widget-title">',		'after_title'   => '</h2>',	) );}add_action( 'widgets_init', 'resolve_widgets_init' );/** * Enqueue scripts and styles. */function resolve_scripts() {	wp_enqueue_style( 'resolve-style', get_stylesheet_uri() );	wp_enqueue_style( 'bootstrap', get_template_directory_uri() . '/layouts/bootstrap.min.css', array(), true );	wp_enqueue_style( 'fawesome', get_template_directory_uri() . '/layouts/all.min.css', array(), true );	wp_enqueue_style( 'owl', get_template_directory_uri() . '/layouts/owl.carousel.min.css', array(), true );	wp_enqueue_style( 'owl-theme', get_template_directory_uri() . '/layouts/owl.theme.default.min.css', array(), true );	wp_enqueue_style( 'lightbox', get_template_directory_uri() . '/layouts/lightbox.min.css', array(), true );    wp_enqueue_style( 'resolve', get_template_directory_uri() . '/layouts/resolve.css', array(), true );    wp_enqueue_script( 'jquery', 'https://code.jquery.com/jquery-3.3.1.min.js', array(), null, true);	wp_enqueue_script( 'bootstrap-js', get_template_directory_uri() . '/js/bootstrap.bundle.min.js', array(), true );	wp_enqueue_script( 'lightbox-js', get_template_directory_uri() . '/js/lightbox.min.js', array(), true );	wp_enqueue_script( 'resolve-js', get_template_directory_uri() . '/js/resolve.js', array(), true );	wp_enqueue_script( 'owl', get_template_directory_uri() . '/js/owl.carousel.min.js', array(), true );	wp_enqueue_script( 'power', get_template_directory_uri() . '/js/power.js', array(), true );	wp_enqueue_script( 'resolve-skip-link-focus-fix', get_template_directory_uri() . '/js/skip-link-focus-fix.js', array(), '20151215', true );    wp_enqueue_script( 'charts', 'https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.bundle.min.js');    if ( is_singular() && comments_open() && get_option( 'thread_comments' ) ) {		wp_enqueue_script( 'comment-reply' );	}}add_action( 'wp_enqueue_scripts', 'resolve_scripts' );/** * Implement the Custom Header feature. */require get_template_directory() . '/inc/custom-header.php';/** * Custom template tags for this theme. */require get_template_directory() . '/inc/template-tags.php';/** * Functions which enhance the theme by hooking into WordPress. */require get_template_directory() . '/inc/template-functions.php';/** * Customizer additions. */require get_template_directory() . '/inc/customizer.php';/** * Load Jetpack compatibility file. */if ( defined( 'JETPACK__VERSION' ) ) {	require get_template_directory() . '/inc/jetpack.php';}if( function_exists('acf_add_options_page') ) {    acf_add_options_page(array(        'page_title' 	=> 'Theme General Settings',        'menu_title'	=> 'Theme Settings',        'menu_slug' 	=> 'theme-general-settings',        'capability'	=> 'edit_posts',        'redirect'		=> false    ));    acf_add_options_sub_page(array(        'page_title' 	=> 'Theme Header Settings',        'menu_title'	=> 'Header',        'parent_slug'	=> 'theme-general-settings',    ));    acf_add_options_sub_page(array(        'page_title' 	=> 'Theme Footer Settings',        'menu_title'	=> 'Footer',        'parent_slug'	=> 'theme-general-settings',    ));    acf_add_options_sub_page(array(        'page_title' 	=> 'Recruitment',        'menu_title'	=> 'Recruitment',        'parent_slug'	=> 'theme-general-settings',    ));    acf_add_options_sub_page(array(        'page_title' 	=> 'Progress',        'menu_title'	=> 'Progress',        'parent_slug'	=> 'theme-general-settings',    ));}function new_excerpt_more($more) {    global $post;    return '<br><br><a class="moretag float-right font-weight-bold" href="'. get_permalink($post->ID) . '"> Read more >></a>';}add_filter('excerpt_more', 'new_excerpt_more');require_once get_template_directory() . '/class-wp-bootstrap-navwalker.php';function get_class_icon($class) {        if( have_rows('class_spec_icons', 'option') ):            while ( have_rows('class_spec_icons', 'option') ) : the_row();                $classicon = get_sub_field('icon');                $classes = get_sub_field('class');                if ($classes['value'] == $class){ ?>                    <img src="<?php echo $classicon['url'];?>" class="p-3 d-block mx-auto">                <?php }            endwhile;        endif;}function register_gallery_post() {    register_post_type( 'gallery_post',        array( 'labels' => array(            'name' => __( 'Gallery'), /* This is the Title of the Group */            'singular_name' => __( 'Gallery'), /* This is the individual type */            'all_items' => __( 'All Gallery Posts'), /* the all items menu item */            'add_new' => __( 'Add New' ), /* The add new menu item */            'add_new_item' => __( 'Add New Gallery' ), /* Add New Display Title */            'edit' => __( 'Edit'), /* Edit Dialog */            'edit_item' => __( 'Edit Gallery' ), /* Edit Display Title */            'new_item' => __( 'New Gallery' ), /* New Display Title */            'view_item' => __( 'View Gallery'), /* View Display Title */            'search_items' => __( 'Search Galleries' ), /* Search Custom Type Title */            'not_found' =>  __( 'Nothing found in the Database.' ), /* This displays if there are no entries yet */            'not_found_in_trash' => __( 'Nothing found in Trash' ), /* This displays if there is nothing in the trash */            'parent_item_colon' => ''        ), /* end of arrays */            'description' => __( 'Gallery images'), /* Custom Type Description */            'public' => true,            'publicly_queryable' => true,            'exclude_from_search' => false,            'show_ui' => true,            'query_var' => true,            'menu_position' => 10, /* this is what order you want it to appear in on the left hand side menu */            'rewrite'	=> array( 'slug' => 'gallery', 'with_front' => false ), /* you can specify its url slug */            'has_archive' => 'gallery', /* you can rename the slug here */            'capability_type' => 'post',            'hierarchical' => false,            /* the next one is important, it tells what's enabled in the post editor */            'supports' => array( 'title', 'editor', 'author', 'thumbnail', 'custom-fields', 'comments', 'revisions', 'sticky')        ) /* end of options */    ); /* end of register post type */    /* this adds your post categories to your custom post type */    register_taxonomy_for_object_type( 'category', 'gallery_post' );    /* this adds your post tags to your custom post type */    register_taxonomy_for_object_type( 'post_tag', 'gallery_post' );}add_action( 'init', 'register_gallery_post');/* clean up header */remove_action ('wp_head', 'rsd_link');function remove_version() {    return '';}add_filter('the_generator', 'remove_version');remove_action( 'wp_head', 'wlwmanifest_link');remove_action( 'wp_head', 'wp_shortlink_wp_head');function cleanup_query_string( $src ){    $parts = explode( '?', $src );    return $parts[0];}add_filter( 'script_loader_src', 'cleanup_query_string', 15, 1 );add_filter( 'style_loader_src', 'cleanup_query_string', 15, 1 );remove_action('wp_head', 'rest_output_link_wp_head', 10);remove_action('wp_head', 'wp_oembed_add_discovery_links', 10);remove_action('template_redirect', 'rest_output_link_header', 11, 0);/** * Disable the emoji's */function disable_emojis() {    remove_action( 'wp_head', 'print_emoji_detection_script', 7 );    remove_action( 'admin_print_scripts', 'print_emoji_detection_script' );    remove_action( 'wp_print_styles', 'print_emoji_styles' );    remove_action( 'admin_print_styles', 'print_emoji_styles' );    remove_filter( 'the_content_feed', 'wp_staticize_emoji' );    remove_filter( 'comment_text_rss', 'wp_staticize_emoji' );    remove_filter( 'wp_mail', 'wp_staticize_emoji_for_email' );    add_filter( 'tiny_mce_plugins', 'disable_emojis_tinymce' );    add_filter( 'wp_resource_hints', 'disable_emojis_remove_dns_prefetch', 10, 2 );}add_action( 'init', 'disable_emojis' );/** * Filter function used to remove the tinymce emoji plugin. * * @param array $plugins * @return array Difference betwen the two arrays */function disable_emojis_tinymce( $plugins ) {    if ( is_array( $plugins ) ) {        return array_diff( $plugins, array( 'wpemoji' ) );    } else {        return array();    }}/** * Remove emoji CDN hostname from DNS prefetching hints. * * @param array $urls URLs to print for resource hints. * @param string $relation_type The relation type the URLs are printed for. * @return array Difference betwen the two arrays. */function disable_emojis_remove_dns_prefetch( $urls, $relation_type ) {    if ( 'dns-prefetch' == $relation_type ) {        /** This filter is documented in wp-includes/formatting.php */        $emoji_svg_url = apply_filters( 'emoji_svg_url', 'https://s.w.org/images/core/emoji/2/svg/' );        $urls = array_diff( $urls, array( $emoji_svg_url ) );    }    return $urls;}